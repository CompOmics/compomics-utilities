/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.angrypeptide.gui;

import com.compomics.angrypeptide.AngryPeptide;
import com.compomics.angrypeptide.bijection.MatchingParameters;
import com.compomics.angrypeptide.fun.ShootingSequence;
import com.compomics.angrypeptide.fun.Shot;
import com.compomics.angrypeptide.fun.Target;
import com.compomics.angrypeptide.fun.Targets;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marc
 */
public class AngryPeptideGUI extends javax.swing.JDialog {

    private Targets targets = null;
    private HashMap<Double, Boolean> hits = new HashMap<Double, Boolean>();
    private ArrayList<Shot> shots = new ArrayList<Shot>();
    private MatchingParameters matchingParameters;
    private double totalDistance;
    private double energyLeft;
    private double userScore = 0;
    private int example = 1;
    private int nShots = 10;

    /**
     * Creates new form AngryPeptideGUI
     */
    public AngryPeptideGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadExample();
    }

    private void loadExample() {
        try {

            AngryPeptide angryPeptide = new AngryPeptide();
            matchingParameters = angryPeptide.getMatchingParameters();
            targets = angryPeptide.getTargets(example);
            totalDistance = angryPeptide.getMaxDistance(example);
            
            for (double position : targets.getPositions()) {
                hits.put(position, false);
            }
            targetsTable.setModel(new TargetsTable());
            sequenceTable.setModel(new SequenceTable());

            energyLeft = Shot.getMinEnergyForDistance(totalDistance + matchingParameters.getMs2Tolerance());

            energyLeftTxt.setText(energyLeft + "");
            userScoreTxt.setText(userScore + "");
                shotsTxt.setText(nShots + "");


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        energyLeftTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        angleTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        energyTxt = new javax.swing.JTextField();
        fireButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sequenceTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        userScoreTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        targetsTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        shotsTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Energy:");

        energyLeftTxt.setEditable(false);
        energyLeftTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Shooting control"));

        jLabel2.setText("Angle:");

        jLabel3.setText("°");

        jLabel4.setText("Energy:");

        energyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                energyTxtKeyReleased(evt);
            }
        });

        fireButton.setText("Fire");
        fireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(angleTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(energyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fireButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(angleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(energyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fireButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence History"));

        jScrollPane1.setViewportView(sequenceTable);

        jLabel5.setText("Score:");

        userScoreTxt.setEditable(false);

        jButton1.setText("Example");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(userScoreTxt))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(userScoreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Targets"));

        jScrollPane2.setViewportView(targetsTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel6.setText("Shots left:");

        shotsTxt.setEditable(false);
        shotsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(energyLeftTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shotsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(shotsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(energyLeftTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireButtonActionPerformed
        firePressed();
    }//GEN-LAST:event_fireButtonActionPerformed

    private void energyTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_energyTxtKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            firePressed();
        }
    }//GEN-LAST:event_energyTxtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
                JOptionPane.showMessageDialog(this, "Do you know people pay for that?",
                        "Note", JOptionPane.INFORMATION_MESSAGE);
        viewExample();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AngryPeptideGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AngryPeptideGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AngryPeptideGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AngryPeptideGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AngryPeptideGUI dialog = new AngryPeptideGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField angleTxt;
    private javax.swing.JTextField energyLeftTxt;
    private javax.swing.JTextField energyTxt;
    private javax.swing.JButton fireButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable sequenceTable;
    private javax.swing.JTextField shotsTxt;
    private javax.swing.JTable targetsTable;
    private javax.swing.JTextField userScoreTxt;
    // End of variables declaration//GEN-END:variables

    private void firePressed() {
        if (validateFire()) {
            Shot shot = new Shot(new Double(energyTxt.getText()), new Double(angleTxt.getText()));
            shots.add(shot);
            double distance = shot.getDistance();
            double score = 0;
            double tolerance = matchingParameters.getMs2Tolerance();
            double bestHit = 0;
            for (double targetPosition : targets.getPositions()) {
                double error = targetPosition - distance;
                if (Math.abs(error) <= tolerance) {
                    if (bestHit < targetPosition) {
                        bestHit = targetPosition;
                    }
                    if (!hits.get(targetPosition)) {
                        score += targets.getTargetAtPosition(targetPosition).getValue();
                        hits.put(targetPosition, true);
                    }
                }
                double distanceReversed = totalDistance - distance;
                error =  targetPosition - distanceReversed;
                if (Math.abs(error) <= tolerance) {
                    if (bestHit < distance) {
                        bestHit = distance;
                    }
                    if (!hits.get(targetPosition)) {
                        score += targets.getTargetAtPosition(targetPosition).getValue();
                        hits.put(targetPosition, true);
                    }
                }
            }
            shot.setScore(score);
            if (score > 0) {
                energyLeft = Shot.getMinEnergyForDistance(bestHit - matchingParameters.getMinFragmentMass() + tolerance);
                if (energyLeft <= Shot.getMinEnergyForDistance(2*matchingParameters.getMinFragmentMass())) {
                    energyLeft = 0;
                    fireButton.setEnabled(false);
                }
                userScore += score;
                energyLeftTxt.setText(energyLeft + "");
                userScoreTxt.setText(userScore + "");
                nShots = 10;
                shotsTxt.setText(nShots + "");
            } else {
                nShots--;
                shotsTxt.setText(nShots + "");
                if (nShots == 0) {
                    fireButton.setEnabled(false);
                }
            }
            ((DefaultTableModel) sequenceTable.getModel()).fireTableDataChanged();
            ((DefaultTableModel) targetsTable.getModel()).fireTableDataChanged();
        }
    }

    private synchronized void viewExample() {
        String sequence = "";
        if (example == 1) {
            sequence = "DNHLLGTFDLTGIPPAPR";
        }
        ArrayList<Shot> shots = ShootingSequence.getSequenceFromAminoAcids(sequence, matchingParameters);
        for (Shot shot : shots) {
            double energy = shot.getEnergy();
            double angle = shot.getAngle();
            if (energy < energyLeft) {
                energyTxt.setText(energy + "");
                angleTxt.setText(angle + "");
                firePressed();
            }
        }
    }

    /**
     * Verifies the user imput
     *
     * @return
     */
    private boolean validateFire() {
        try {
            double angle = new Double(angleTxt.getText());
            if (angle >= 90 || angle <= 0) {
                JOptionPane.showMessageDialog(this, "You just shot yourself. We recommend you the use of SearchGUI: http://searchgui.googlecode.com.",
                        "Nice Shot", JOptionPane.INFORMATION_MESSAGE);
                System.exit(1);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while processing the angle.",
                    "Angle Error", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        try {
            double energy = new Double(energyTxt.getText());
            if (energy <= 0) {
                JOptionPane.showMessageDialog(this, "You just shot yourself. We recommend you the use of SearchGUI: http://searchgui.googlecode.com.",
                        "Nice Shot", JOptionPane.INFORMATION_MESSAGE);
                System.exit(1);
            }

            if (energy > energyLeft) {
                JOptionPane.showMessageDialog(this, "You don't have enough energy left to achieve this shot.",
                        "Low Energy", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while processing the energy.",
                    "Energy Error", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    private class TargetsTable extends DefaultTableModel {

        /**
         * The positions of the targets
         */
        private ArrayList<Double> positions;

        /**
         * Constructor
         */
        public TargetsTable() {
            if (targets != null) {
                positions = targets.getPositions();
                Collections.sort(positions, Collections.reverseOrder());
            }
        }

        @Override
        public int getRowCount() {
            if (targets == null) {
                return 0;
            }
            return targets.getNTargets();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Hit";
                case 1:
                    return "Distance";
                case 2:
                    return "Value";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            double distance = positions.get(row);
            switch (column) {
                case 0:
                    return hits.get(distance);
                case 1:
                    Target target = targets.getTargetAtPosition(distance);
                    return target.getPosition();
                case 2:
                    target = targets.getTargetAtPosition(distance);
                    return target.getValue();
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        }
    }

    private class SequenceTable extends DefaultTableModel {

        @Override
        public int getRowCount() {
            if (shots == null) {
                return 0;
            }
            return shots.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Angle";
                case 1:
                    return "Energy";
                case 2:
                    return "Distance achieved";
                case 3:
                    return "Score";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            Shot shot = shots.get(row);
            switch (column) {
                case 0:
                    return shot.getAngle();
                case 1:
                    return shot.getEnergy();
                case 2:
                    return shot.getDistance();
                case 3:
                    return shot.getScore();
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        }
    }
}
