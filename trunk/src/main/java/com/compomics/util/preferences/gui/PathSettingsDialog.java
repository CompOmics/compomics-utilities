package com.compomics.util.preferences.gui;

import com.compomics.util.Util;
import com.compomics.util.preferences.PathKey;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Dialog used to set paths
 *
 * @author Marc Vaudel
 */
public class PathSettingsDialog extends javax.swing.JDialog {

    /**
     * Boolean indicating whether the process was cancelled by the user
     */
    private boolean canceled = false;

    /**
     * Original map of the paths to set
     */
    private HashMap<PathKey, String> originalKeyToPathMap = null;
    /**
     * Map of the paths to set
     */
    private HashMap<PathKey, String> keyToPathMap = null;
    /**
     * List of paths
     */
    private ArrayList<PathKey> keyList = null;
    /**
     * Name to key map
     */
    private HashMap<String, PathKey> nameToKey = null;
    /**
     * The tool name
     */
    private String toolName;
    /**
     * Tooltips for the paths
     */
    private ArrayList<String> pathsToolTips;

    /**
     * Creates new form PathSettingsDialog
     *
     * @param parent the parent frame
     * @param toolName the tool name
     * @param keyToPathMap the initial path settings
     */
    public PathSettingsDialog(java.awt.Frame parent, String toolName, HashMap<PathKey, String> keyToPathMap) {
        super(parent, true);

        this.toolName = toolName;
        this.originalKeyToPathMap = keyToPathMap;
        this.keyToPathMap = (HashMap<PathKey, String>) keyToPathMap.clone();
        nameToKey = new HashMap<String, PathKey>(keyToPathMap.size());
        for (PathKey key : keyToPathMap.keySet()) {
            nameToKey.put(key.getId(), key);
        }
        ArrayList<String> names = new ArrayList<String>(nameToKey.keySet());
        Collections.sort(names);
        keyList = new ArrayList<PathKey>(names.size());
        pathsToolTips = new ArrayList<String>(names.size());
        for (String name : names) {
            PathKey pathKey = nameToKey.get(name);
            keyList.add(pathKey);
            pathsToolTips.add(pathKey.getDescription());
        }

        initComponents();
        setUpGUI();
        setLocationRelativeTo(parent);
        setTitle("Resource Folders");
        setVisible(true);
    }

    /**
     * Sets up the gui components
     */
    public void setUpGUI() {
        pathTable.getTableHeader().setReorderingAllowed(false);

        pathTable.getColumn(" ").setMaxWidth(30);
        pathTable.getColumn(" ").setMinWidth(30);

        // make sure that the scroll panes are see-through
        pathTableScrollPane.getViewport().setOpaque(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportDocumentationPopupMenu = new javax.swing.JPopupMenu();
        editPathMenuItem = new javax.swing.JMenuItem();
        setDefaultPath = new javax.swing.JMenuItem();
        pathSettingsJPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        pathTableScrollPane = new javax.swing.JScrollPane();
        pathTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        editPathMenuItem.setText("Edit Path");
        editPathMenuItem.setToolTipText("Edit Selected Path");
        editPathMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPathMenuItemActionPerformed(evt);
            }
        });
        reportDocumentationPopupMenu.add(editPathMenuItem);

        setDefaultPath.setText("Set Default Path");
        setDefaultPath.setToolTipText("Set a path for all files");
        setDefaultPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultPathActionPerformed(evt);
            }
        });
        reportDocumentationPopupMenu.add(setDefaultPath);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pathSettingsJPanel.setBackground(new java.awt.Color(230, 230, 230));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Path Settings"));
        tablePanel.setOpaque(false);

        pathTableScrollPane.setOpaque(false);

        pathTable.setModel(new PathsTableModel());
        pathTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pathTableMouseReleased(evt);
            }
        });
        pathTableScrollPane.setViewportView(pathTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pathTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 801, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pathTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("Right-click to edit paths.");

        javax.swing.GroupLayout pathSettingsJPanelLayout = new javax.swing.GroupLayout(pathSettingsJPanel);
        pathSettingsJPanel.setLayout(pathSettingsJPanelLayout);
        pathSettingsJPanelLayout.setHorizontalGroup(
            pathSettingsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathSettingsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pathSettingsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pathSettingsJPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pathSettingsJPanelLayout.setVerticalGroup(
            pathSettingsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pathSettingsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pathSettingsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pathSettingsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pathSettingsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editPathMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPathMenuItemActionPerformed
        editSelectedPath();
    }//GEN-LAST:event_editPathMenuItemActionPerformed

    private void setDefaultPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultPathActionPerformed
        setDefaultPath();
    }//GEN-LAST:event_setDefaultPathActionPerformed

    private void pathTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathTableMouseReleased

        if (evt != null && pathTable.rowAtPoint(evt.getPoint()) != -1) {
            pathTable.setRowSelectionInterval(pathTable.rowAtPoint(evt.getPoint()), pathTable.rowAtPoint(evt.getPoint()));
        }

        if (evt != null && evt.getButton() == MouseEvent.BUTTON3 && pathTable.getSelectedRow() != -1) {
            reportDocumentationPopupMenu.show(pathTable, evt.getX(), evt.getY());
        }

        if (evt != null && evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            editSelectedPath();
        }
    }//GEN-LAST:event_pathTableMouseReleased

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        boolean changed = false;
        for (PathKey pathKey : originalKeyToPathMap.keySet()) {
            String newPath = keyToPathMap.get(pathKey);
            String originalPath = originalKeyToPathMap.get(pathKey);
            if (!originalPath.equals(newPath)) {
                changed = true;
                break;
            }
        }

        if (changed) {

            int outcome = JOptionPane.showConfirmDialog(this, toolName + " needs to restart in order to take the new settings into account. Restart now?",
                    "Restart Requested", JOptionPane.OK_CANCEL_OPTION);

            if (outcome != JOptionPane.OK_OPTION) {
                canceled = true;
            }

        }

        dispose();

    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        canceled = true;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem editPathMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel pathSettingsJPanel;
    private javax.swing.JTable pathTable;
    private javax.swing.JScrollPane pathTableScrollPane;
    private javax.swing.JPopupMenu reportDocumentationPopupMenu;
    private javax.swing.JMenuItem setDefaultPath;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Edits the selected path
     */
    private void editSelectedPath() {
        int selectedRow = pathTable.getSelectedRow();
        String name = (String) pathTable.getValueAt(selectedRow, 1);
        PathKey pathKey = nameToKey.get(name);
        File selectedFile = Util.getUserSelectedFolder(this, "Select " + pathKey.getId() + " Folder", keyToPathMap.get(pathKey), pathKey.getId() + " Folder", "Select", false);
        keyToPathMap.put(pathKey, selectedFile.getAbsolutePath());
        ((DefaultTableModel) pathTable.getModel()).fireTableDataChanged();
    }

    /**
     * Sets a default path
     */
    private void setDefaultPath() {
        File selectedFile = Util.getUserSelectedFolder(this, "Select Default Folder", null, "Default Folder", "Select", false);
        for (PathKey pathKey : keyToPathMap.keySet()) {
            keyToPathMap.put(pathKey, selectedFile.getAbsolutePath());
        }
        ((DefaultTableModel) pathTable.getModel()).fireTableDataChanged();
    }

    /**
     * Indicates whether the action was cancelled by the used.
     *
     * @return true if the action was cancelled by the used
     */
    public boolean isCanceled() {
        return canceled;
    }

    /**
     * Returns the path settings in a map: key | path.
     *
     * @return the path settings in a map
     */
    public HashMap<PathKey, String> getKeyToPathMap() {
        return keyToPathMap;
    }

    /**
     * Table model for the Paths table.
     */
    private class PathsTableModel extends DefaultTableModel {

        /**
         * Creates a new table model
         */
        public PathsTableModel() {
        }

        @Override
        public int getRowCount() {
            if (keyToPathMap == null) {
                return 0;
            }
            return keyToPathMap.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Name";
                case 2:
                    return "Path";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            PathKey pathKey = keyList.get(row);
            switch (column) {
                case 0:
                    return row + 1;
                case 1:
                    return pathKey.getId();
                case 2:
                    File file = new File(keyToPathMap.get(pathKey));
                    return file.getAbsolutePath();
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }

}
