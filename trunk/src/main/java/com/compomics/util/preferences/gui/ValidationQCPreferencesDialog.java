package com.compomics.util.preferences.gui;

import com.compomics.util.experiment.filtering.Filter;
import com.compomics.util.preferences.ValidationQCPreferences;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * Dialog for the edition of validation QC filters
 *
 * @author Marc Vaudel
 */
public class ValidationQCPreferencesDialog extends javax.swing.JDialog {

    /**
     * A parent handling the edition of filters
     */
    private ValidationQCPreferencesDialogParent validationQCPreferencesDialogParent;
    /**
     * List of the psm quality filters
     */
    private ArrayList<Filter> psmFilters = new ArrayList<Filter>();
    /**
     * List of the peptide quality filters
     */
    private ArrayList<Filter> peptideFilters = new ArrayList<Filter>();
    /**
     * List of the protein quality filters
     */
    private ArrayList<Filter> proteinFilters = new ArrayList<Filter>();
    /**
     * boolean indicating whether the edition was canceled
     */
    boolean canceled = false;

    /**
     * Creates new validation QC preferences dialog.
     *
     * @param parent the parent frame
     * @param validationQCPreferencesDialogParent a parent handling the edition
     * of filters
     * @param validationQCPreferences the validation QC preferences
     */
    public ValidationQCPreferencesDialog(java.awt.Frame parent, ValidationQCPreferencesDialogParent validationQCPreferencesDialogParent, ValidationQCPreferences validationQCPreferences) {
        super(parent, true);
        initComponents();

        this.validationQCPreferencesDialogParent = validationQCPreferencesDialogParent;

        ArrayList<Filter> originalPsmFilters = validationQCPreferences.getPsmFilters();
        if (originalPsmFilters != null) {
            for (Filter filter : originalPsmFilters) {
                psmFilters.add(filter.clone());
            }
        } else {
            psmFilters = new ArrayList<Filter>();
        }

        ArrayList<Filter> originalPeptidesFilters = validationQCPreferences.getPeptideFilters();
        if (originalPeptidesFilters != null) {
            for (Filter filter : originalPeptidesFilters) {
                peptideFilters.add(filter.clone());
            }
        } else {
            peptideFilters = new ArrayList<Filter>();
        }

        ArrayList<Filter> originalProteinFilters = validationQCPreferences.getProteinFilters();
        if (originalProteinFilters != null) {
            for (Filter filter : originalProteinFilters) {
                proteinFilters.add(filter.clone());
            }
        } else {
            proteinFilters = new ArrayList<Filter>();
        }

        setUpGUI(validationQCPreferences);

        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * Fills the gui according to the validation qc preferences.
     *
     * @param validationQCPreferences the validation QC preferences
     */
    private void setUpGUI(ValidationQCPreferences validationQCPreferences) {
        dbCheck.setSelected(validationQCPreferences.isDbSize());
        nTargetCheck.setSelected(validationQCPreferences.isFirstDecoy());
        confidenceCheck.setSelected(validationQCPreferences.getConfidenceMargin() != 0.0);

        psmTable.getColumn(" ").setMaxWidth(50);
        peptideTable.getColumn(" ").setMaxWidth(50);
        proteinTable.getColumn(" ").setMaxWidth(50);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        psmPopupMenu = new javax.swing.JPopupMenu();
        addPsmFilterMenuItem = new javax.swing.JMenuItem();
        editPsmFilterMenuItem = new javax.swing.JMenuItem();
        peptidePopupMenu = new javax.swing.JPopupMenu();
        addPeptideFilterMenuItem = new javax.swing.JMenuItem();
        editPeptideFilterMenuItem = new javax.swing.JMenuItem();
        proteinPopupMenu = new javax.swing.JPopupMenu();
        addProteinFilterMenuItem = new javax.swing.JMenuItem();
        editProteinFilterMenuItem = new javax.swing.JMenuItem();
        validationQCPreferencesDialogPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        generalSettingsPanel = new javax.swing.JPanel();
        dbCheck = new javax.swing.JCheckBox();
        nTargetCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        confidenceCheck = new javax.swing.JCheckBox();
        peptideFiltersPanel = new javax.swing.JPanel();
        peptideScrollPane = new javax.swing.JScrollPane();
        peptideTable = new javax.swing.JTable();
        psmFiltersPanel = new javax.swing.JPanel();
        psmScrollPane = new javax.swing.JScrollPane();
        psmTable = new javax.swing.JTable();
        proteinFiltersPanel = new javax.swing.JPanel();
        proteinScrollPane = new javax.swing.JScrollPane();
        proteinTable = new javax.swing.JTable();
        helpLbl = new javax.swing.JLabel();

        addPsmFilterMenuItem.setText("Add Filter");
        addPsmFilterMenuItem.setToolTipText("Add a new filter");
        addPsmFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPsmFilterMenuItemActionPerformed(evt);
            }
        });
        psmPopupMenu.add(addPsmFilterMenuItem);

        editPsmFilterMenuItem.setText("Edit Filter");
        editPsmFilterMenuItem.setToolTipText("Edit the selected filter");
        editPsmFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPsmFilterMenuItemActionPerformed(evt);
            }
        });
        psmPopupMenu.add(editPsmFilterMenuItem);

        addPeptideFilterMenuItem.setText("Add Filter");
        addPeptideFilterMenuItem.setToolTipText("Add a new filter");
        addPeptideFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPeptideFilterMenuItemActionPerformed(evt);
            }
        });
        peptidePopupMenu.add(addPeptideFilterMenuItem);

        editPeptideFilterMenuItem.setText("Edit Filter");
        editPeptideFilterMenuItem.setToolTipText("Edit the selected filter");
        editPeptideFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPeptideFilterMenuItemActionPerformed(evt);
            }
        });
        peptidePopupMenu.add(editPeptideFilterMenuItem);

        addProteinFilterMenuItem.setText("Add Filter");
        addProteinFilterMenuItem.setToolTipText("Add a new filter");
        addProteinFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProteinFilterMenuItemActionPerformed(evt);
            }
        });
        proteinPopupMenu.add(addProteinFilterMenuItem);

        editProteinFilterMenuItem.setText("Edit Filter");
        editProteinFilterMenuItem.setToolTipText("Edit the selected filter");
        editProteinFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProteinFilterMenuItemActionPerformed(evt);
            }
        });
        proteinPopupMenu.add(editProteinFilterMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        validationQCPreferencesDialogPanel.setBackground(new java.awt.Color(230, 230, 230));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        generalSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Settings"));
        generalSettingsPanel.setOpaque(false);

        dbCheck.setText("Hits obtained on small databases (<1,000 protein sequences)");
        dbCheck.setOpaque(false);

        nTargetCheck.setText("Datasets with low number of target hits");
        nTargetCheck.setOpaque(false);

        jLabel1.setText("Mark doubtful:");

        confidenceCheck.setText("Hits near the confidence threshold (margin= 1 x resolution)");
        confidenceCheck.setOpaque(false);

        javax.swing.GroupLayout generalSettingsPanelLayout = new javax.swing.GroupLayout(generalSettingsPanel);
        generalSettingsPanel.setLayout(generalSettingsPanelLayout);
        generalSettingsPanelLayout.setHorizontalGroup(
            generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalSettingsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confidenceCheck)
                            .addComponent(dbCheck)
                            .addComponent(nTargetCheck)))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generalSettingsPanelLayout.setVerticalGroup(
            generalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(dbCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nTargetCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confidenceCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        peptideFiltersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Peptide Default Filters"));
        peptideFiltersPanel.setOpaque(false);

        peptideScrollPane.setOpaque(false);

        peptideTable.setModel(new FiltersTableModel(peptideFilters));
        peptideTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                peptideTableMouseReleased(evt);
            }
        });
        peptideScrollPane.setViewportView(peptideTable);

        javax.swing.GroupLayout peptideFiltersPanelLayout = new javax.swing.GroupLayout(peptideFiltersPanel);
        peptideFiltersPanel.setLayout(peptideFiltersPanelLayout);
        peptideFiltersPanelLayout.setHorizontalGroup(
            peptideFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peptideScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                .addContainerGap())
        );
        peptideFiltersPanelLayout.setVerticalGroup(
            peptideFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peptideScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        psmFiltersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PSM Default Filters"));
        psmFiltersPanel.setOpaque(false);

        psmScrollPane.setOpaque(false);

        psmTable.setModel(new FiltersTableModel(psmFilters));
        psmTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                psmTableMouseReleased(evt);
            }
        });
        psmScrollPane.setViewportView(psmTable);

        javax.swing.GroupLayout psmFiltersPanelLayout = new javax.swing.GroupLayout(psmFiltersPanel);
        psmFiltersPanel.setLayout(psmFiltersPanelLayout);
        psmFiltersPanelLayout.setHorizontalGroup(
            psmFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                .addContainerGap())
        );
        psmFiltersPanelLayout.setVerticalGroup(
            psmFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        proteinFiltersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Protein Default Filters"));
        proteinFiltersPanel.setOpaque(false);

        proteinScrollPane.setOpaque(false);

        proteinTable.setModel(new FiltersTableModel(proteinFilters));
        proteinTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                proteinTableMouseReleased(evt);
            }
        });
        proteinScrollPane.setViewportView(proteinTable);

        javax.swing.GroupLayout proteinFiltersPanelLayout = new javax.swing.GroupLayout(proteinFiltersPanel);
        proteinFiltersPanel.setLayout(proteinFiltersPanelLayout);
        proteinFiltersPanelLayout.setHorizontalGroup(
            proteinFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                .addContainerGap())
        );
        proteinFiltersPanelLayout.setVerticalGroup(
            proteinFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        helpLbl.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        helpLbl.setText("Right-click to edit the filters");

        javax.swing.GroupLayout validationQCPreferencesDialogPanelLayout = new javax.swing.GroupLayout(validationQCPreferencesDialogPanel);
        validationQCPreferencesDialogPanel.setLayout(validationQCPreferencesDialogPanelLayout);
        validationQCPreferencesDialogPanelLayout.setHorizontalGroup(
            validationQCPreferencesDialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validationQCPreferencesDialogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(validationQCPreferencesDialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(validationQCPreferencesDialogPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(helpLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(generalSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peptideFiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(psmFiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(proteinFiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        validationQCPreferencesDialogPanelLayout.setVerticalGroup(
            validationQCPreferencesDialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, validationQCPreferencesDialogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generalSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(psmFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(peptideFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proteinFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(validationQCPreferencesDialogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(helpLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(validationQCPreferencesDialogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(validationQCPreferencesDialogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        canceled = true;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void addPsmFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPsmFilterMenuItemActionPerformed

        Filter newFilter = validationQCPreferencesDialogParent.createPsmFilter();
        if (newFilter != null) {
            psmFilters.add(newFilter);
            ((DefaultTableModel) psmTable.getModel()).fireTableDataChanged();
        }

    }//GEN-LAST:event_addPsmFilterMenuItemActionPerformed

    private void editPsmFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPsmFilterMenuItemActionPerformed

        int row = psmTable.getSelectedRow();
        Filter selectedFilter = psmFilters.get(row);
        validationQCPreferencesDialogParent.editPsmFilter(selectedFilter);

    }//GEN-LAST:event_editPsmFilterMenuItemActionPerformed

    private void psmTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_psmTableMouseReleased
        if (evt != null && psmTable.rowAtPoint(evt.getPoint()) != -1) {
            int row = psmTable.rowAtPoint(evt.getPoint());
            psmTable.setRowSelectionInterval(row, row);
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON3) {
            psmPopupMenu.show(psmTable, evt.getX(), evt.getY());
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            editPsmFilterMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_psmTableMouseReleased

    private void addPeptideFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPeptideFilterMenuItemActionPerformed

        Filter newFilter = validationQCPreferencesDialogParent.createPeptideFilter();
        if (newFilter != null) {
            peptideFilters.add(newFilter);
            ((DefaultTableModel) peptideTable.getModel()).fireTableDataChanged();
        }

    }//GEN-LAST:event_addPeptideFilterMenuItemActionPerformed

    private void editPeptideFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPeptideFilterMenuItemActionPerformed

        int row = peptideTable.getSelectedRow();
        Filter selectedFilter = peptideFilters.get(row);
        validationQCPreferencesDialogParent.editPeptideFilter(selectedFilter);

    }//GEN-LAST:event_editPeptideFilterMenuItemActionPerformed

    private void addProteinFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProteinFilterMenuItemActionPerformed

        Filter newFilter = validationQCPreferencesDialogParent.createProteinFilter();
        if (newFilter != null) {
            proteinFilters.add(newFilter);
            ((DefaultTableModel) proteinTable.getModel()).fireTableDataChanged();
        }

    }//GEN-LAST:event_addProteinFilterMenuItemActionPerformed

    private void editProteinFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProteinFilterMenuItemActionPerformed

        int row = proteinTable.getSelectedRow();
        Filter selectedFilter = proteinFilters.get(row);
        validationQCPreferencesDialogParent.editProteinFilter(selectedFilter);

    }//GEN-LAST:event_editProteinFilterMenuItemActionPerformed

    private void peptideTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_peptideTableMouseReleased
        if (evt != null && peptideTable.rowAtPoint(evt.getPoint()) != -1) {
            int row = peptideTable.rowAtPoint(evt.getPoint());
            peptideTable.setRowSelectionInterval(row, row);
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON3) {
            peptidePopupMenu.show(peptideTable, evt.getX(), evt.getY());
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            editPeptideFilterMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_peptideTableMouseReleased

    private void proteinTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proteinTableMouseReleased
        if (evt != null && proteinTable.rowAtPoint(evt.getPoint()) != -1) {
            int row = proteinTable.rowAtPoint(evt.getPoint());
            proteinTable.setRowSelectionInterval(row, row);
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON3) {
            proteinPopupMenu.show(proteinTable, evt.getX(), evt.getY());
        }
        if (evt != null && evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            editProteinFilterMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_proteinTableMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addPeptideFilterMenuItem;
    private javax.swing.JMenuItem addProteinFilterMenuItem;
    private javax.swing.JMenuItem addPsmFilterMenuItem;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox confidenceCheck;
    private javax.swing.JCheckBox dbCheck;
    private javax.swing.JMenuItem editPeptideFilterMenuItem;
    private javax.swing.JMenuItem editProteinFilterMenuItem;
    private javax.swing.JMenuItem editPsmFilterMenuItem;
    private javax.swing.JPanel generalSettingsPanel;
    private javax.swing.JLabel helpLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox nTargetCheck;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel peptideFiltersPanel;
    private javax.swing.JPopupMenu peptidePopupMenu;
    private javax.swing.JScrollPane peptideScrollPane;
    private javax.swing.JTable peptideTable;
    private javax.swing.JPanel proteinFiltersPanel;
    private javax.swing.JPopupMenu proteinPopupMenu;
    private javax.swing.JScrollPane proteinScrollPane;
    private javax.swing.JTable proteinTable;
    private javax.swing.JPanel psmFiltersPanel;
    private javax.swing.JPopupMenu psmPopupMenu;
    private javax.swing.JScrollPane psmScrollPane;
    private javax.swing.JTable psmTable;
    private javax.swing.JPanel validationQCPreferencesDialogPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Indicates whether the preference edition was canceled by the user.
     *
     * @return a boolean indicating whether the preference edition was canceled
     * by the user
     */
    public boolean isCanceled() {
        return canceled;
    }

    /**
     * Returns the validation QC preferences as set by the user.
     *
     * @return the validation QC preferences as set by the user
     */
    public ValidationQCPreferences getValidationQCPreferences() {
        ValidationQCPreferences validationQCPreferences = new ValidationQCPreferences();
        validationQCPreferences.setDbSize(dbCheck.isSelected());
        validationQCPreferences.setFirstDecoy(nTargetCheck.isSelected());
        if (!confidenceCheck.isSelected()) {
            validationQCPreferences.setConfidenceMargin(0.0);
        } else {
            validationQCPreferences.setConfidenceMargin(1.0); // @TODO: let the user change this
        }
        validationQCPreferences.setPsmFilters(psmFilters);
        validationQCPreferences.setPeptideFilters(peptideFilters);
        validationQCPreferences.setProteinFilters(proteinFilters);
        return validationQCPreferences;
    }

    /**
     * Table model for a filters table.
     */
    private class FiltersTableModel extends DefaultTableModel {

        /**
         * list of filters to display
         */
        private ArrayList<Filter> filters;

        /**
         * Creates a new table model.
         */
        public FiltersTableModel(ArrayList<Filter> filters) {
            this.filters = filters;
        }

        @Override
        public int getRowCount() {
            if (filters == null) {
                return 0;
            }
            return filters.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Name";
                case 2:
                    return "Description";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            Filter filter = filters.get(row);
            switch (column) {
                case 0:
                    return row + 1;
                case 1:
                    return filter.getName();
                case 2:
                    return filter.getDescription();
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }

}
