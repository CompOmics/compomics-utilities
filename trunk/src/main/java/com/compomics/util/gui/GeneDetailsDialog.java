package com.compomics.util.gui;

import com.compomics.util.experiment.annotation.gene.GeneFactory;
import com.compomics.util.experiment.annotation.go.GOFactory;
import com.compomics.util.experiment.identification.matches.ProteinMatch;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

/**
 * This dialog displays the gene details associated to a protein match.
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class GeneDetailsDialog extends javax.swing.JDialog {

    /**
     * The GO terms factory.
     */
    private GOFactory goFactory = GOFactory.getInstance();
    /**
     * The Gene factory.
     */
    private GeneFactory geneFactory = GeneFactory.getInstance();
    /**
     * the protein accessions of this match.
     */
    private ArrayList<String> proteinAccessions;
    /**
     * The GO terms attached to this protein match.
     */
    private ArrayList<String> goTerms;

    /**
     * Creates a new GeneDetailsDialog.
     *
     * @param parent the parent frame
     * @param proteinMatchKey the protein match key
     * @throws IOException
     */
    public GeneDetailsDialog(java.awt.Frame parent, String proteinMatchKey) throws IOException {
        super(parent, true);
        initComponents();
        proteinAccessions = new ArrayList<String>(Arrays.asList(ProteinMatch.getAccessions(proteinMatchKey)));
        goTerms = goFactory.getProteinMatchTerms(proteinMatchKey);
        Collections.sort(goTerms);
        setUpGUI();
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        detailsPanel = new javax.swing.JPanel();
        ensemlbIdLabel = new javax.swing.JLabel();
        geneIdTxt = new javax.swing.JTextField();
        geneNameTxt = new javax.swing.JTextField();
        geneNameLabel = new javax.swing.JLabel();
        chromosomeLabel = new javax.swing.JLabel();
        chromosomeNameTxt = new javax.swing.JTextField();
        goAnnotationLabel = new javax.swing.JLabel();
        goTableScrollPane = new javax.swing.JScrollPane();
        goTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gene Details");

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gene Details"));
        detailsPanel.setOpaque(false);

        ensemlbIdLabel.setText("Ensembl Gene ID");

        geneIdTxt.setEditable(false);

        geneNameTxt.setEditable(false);

        geneNameLabel.setText("Gene Name");

        chromosomeLabel.setText("Chromosome");

        chromosomeNameTxt.setEditable(false);

        goAnnotationLabel.setText("GO Annotation");

        goTable.setModel(new GOTableModel());
        goTableScrollPane.setViewportView(goTable);

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ensemlbIdLabel)
                            .addComponent(geneNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(geneIdTxt)
                            .addComponent(geneNameTxt)))
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addComponent(goAnnotationLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addComponent(chromosomeLabel)
                        .addGap(37, 37, 37)
                        .addComponent(chromosomeNameTxt)))
                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ensemlbIdLabel)
                    .addComponent(geneIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneNameLabel)
                    .addComponent(geneNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chromosomeLabel)
                    .addComponent(chromosomeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(goAnnotationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel chromosomeLabel;
    private javax.swing.JTextField chromosomeNameTxt;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel ensemlbIdLabel;
    private javax.swing.JTextField geneIdTxt;
    private javax.swing.JLabel geneNameLabel;
    private javax.swing.JTextField geneNameTxt;
    private javax.swing.JLabel goAnnotationLabel;
    private javax.swing.JTable goTable;
    private javax.swing.JScrollPane goTableScrollPane;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Set up the GUI.
     */
    private void setUpGUI() {

        goTable.getColumn(" ").setMaxWidth(50);
        goTable.getColumn(" ").setMinWidth(50);

        goTable.getTableHeader().setReorderingAllowed(false);

        // correct the color for the upper right corner
        JPanel proteinCorner = new JPanel();
        proteinCorner.setBackground(goTable.getTableHeader().getBackground());
        goTableScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, proteinCorner);

        // make sure that the scroll panes are see-through
        goTableScrollPane.getViewport().setOpaque(false);

        try {
            String title = "", geneIdsTxt = "", geneNamesTxt = "", chromosomeTxt = "";
            ArrayList<String> geneNames = new ArrayList<String>();
            for (String accession : proteinAccessions) {
                if (title.equals("")) {
                    title += "Gene details for ";
                } else {
                    title += ", ";
                }
                title += accession;

                String geneName = geneFactory.getGeneNameForUniProtProtein(accession);
                geneNames.add(geneName);
            }

            ArrayList<String> chromosomes = new ArrayList<String>();
            for (String geneName : geneNames) {
                if (!geneIdsTxt.equals("")) {
                    geneIdsTxt += ", ";
                    geneNamesTxt += ", ";
                }

                String ensemblId = geneFactory.getGeneEnsemblId(geneName);

                if (ensemblId == null) {
                    geneIdsTxt += "unknown";
                } else {
                    geneIdsTxt += geneFactory.getGeneEnsemblId(geneName);
                }

                if (geneName == null) {
                    geneNamesTxt += "unknown";
                } else {
                    geneNamesTxt += geneName;
                }

                String chromosome = geneFactory.getChromosomeForGeneName(geneName);
                chromosomes.add(chromosome);
            }

            for (String chromosome : chromosomes) {
                if (!chromosomeTxt.equals("")) {
                    chromosomeTxt += ", ";
                }
                if (chromosome == null) {
                    chromosomeTxt += "unknown";
                } else {
                    chromosomeTxt += chromosome;
                }
            }

            ((TitledBorder) detailsPanel.getBorder()).setTitle(title);
            geneIdTxt.setText(geneIdsTxt);
            geneNameTxt.setText(geneNamesTxt);
            chromosomeNameTxt.setText(chromosomeTxt);

        } catch (ClassNotFoundException e) { // @TODO: better error handling
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Table model for the GO annotation.
     */
    private class GOTableModel extends DefaultTableModel {

        @Override
        public int getRowCount() {
            if (goTerms != null) {
                return goTerms.size();
            }
            return 0;
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {

            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Accession";
                case 2:
                    return "Description";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {

            switch (column) {
                case 0:
                    return (row + 1);
                case 1:
                    return goTerms.get(row);
                case 2:
                    String term = goTerms.get(row);
                    try {
                        String description = goFactory.getTermDescription(term);
                        if (description == null) {
                            return "";
                        }
                        return description;
                    } catch (Exception e) {
                        return "Error";
                    }
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return getValueAt(0, columnIndex).getClass();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }
}
